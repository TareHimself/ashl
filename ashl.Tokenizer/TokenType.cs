namespace ashl.Tokenizer;

public enum TokenType
{
    Unknown,
    [KeywordToken("=")]
    Assign,
    [KeywordToken(".")]
    Access,
    [KeywordToken("&&")]
    OpAnd,
    [KeywordToken("||")]
    OpOr,
    [KeywordToken("!")]
    OpNot,
    [KeywordToken("+")]
    OpAdd,
    [KeywordToken("-")]
    OpSubtract,
    [KeywordToken("/")]
    OpDivide,
    [KeywordToken("*")]
    OpMultiply,
    [KeywordToken("%")]
    OpMod,
    [KeywordToken("==")]
    OpEqual,
    [KeywordToken("!=")]
    OpNotEqual,
    [KeywordToken("<")]
    OpLess,
    [KeywordToken(">")]
    OpGreater,
    [KeywordToken("<=")]
    OpLessEqual,
    [KeywordToken(">=")]
    OpGreaterEqual,
    [KeywordToken("{")]
    OpenBrace,
    [KeywordToken("}")]
    CloseBrace,
    [KeywordToken("(")]
    OpenParen,
    [KeywordToken(")")]
    CloseParen,
    [KeywordToken("[")]
    OpenBracket,
    [KeywordToken("]")]
    CloseBracket,
    Identifier,
    Function,
    [KeywordToken("return")]
    Return,
    [KeywordToken(",")]
    Comma,
    BooleanLiteral,
    [KeywordToken("for")]
    For,
    [KeywordToken("continue")]
    Continue,
    [KeywordToken("break")]
    Break,
    [KeywordToken(";")]
    StatementEnd,
    DeclarationCount,
    [KeywordToken("struct")]
    TypeStruct,
    [KeywordToken("float")]
    TypeFloat,
    [KeywordToken("vec2")]
    TypeVec2f,
    [KeywordToken("vec3")]
    TypeVec3f,
    [KeywordToken("vec4")]
    TypeVec4f,
    [KeywordToken("int")]
    TypeInt,
    [KeywordToken("ivec2")]
    TypeVec2i,
    [KeywordToken("ivec3")]
    TypeVec3i,
    [KeywordToken("ivec4")]
    TypeVec4i,
    [KeywordToken("mat3")]
    TypeMat3,
    [KeywordToken("mat4")]
    TypeMat4,
    [KeywordToken("bool")]
    TypeBoolean,
    [KeywordToken("void")]
    TypeVoid,
    
    [KeywordToken("in")]
    DataIn,
    [KeywordToken("out")]
    DataOut,
    [KeywordToken("layout")]
    Layout,
    [KeywordToken("uniform")]
    Uniform,
    [KeywordToken("discard")]
    Discard,
    [KeywordToken("#include")]
    Include,
    [KeywordToken("#define")]
    Define,
    [KeywordToken("const")]
    Const,
    [KeywordToken("push")]
    PushConstant,
    [KeywordToken("@Vertex")]
    VertexScope,
    [KeywordToken("@Fragment")]
    FragmentScope,
}